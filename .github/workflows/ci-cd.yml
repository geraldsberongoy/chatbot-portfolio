name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE_NAME: gerald-portfolio-chatbot
  REGISTRY: ghcr.io

jobs:
  # ===== TESTING & CODE QUALITY =====
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: |
          echo "üîç Running ESLint code quality checks..."
          npm run lint:check

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Check for vulnerabilities
        run: |
          # Install and run safety checks
          npm install --no-save snyk
          npx snyk test --json || true

      - name: Test API endpoints (smoke tests)
        run: |
          # Start server in background
          npm start &
          SERVER_PID=$!
          sleep 10

          # Test health endpoint
          curl -f http://localhost:5000/api/v1/health || exit 1
          curl -f http://localhost:5000/api/v1/docs || exit 1

          # Kill server
          kill $SERVER_PID
        env:
          NODE_ENV: test
          AI_PROVIDER: fallback
          PORT: 5000

  # ===== DOCKER BUILD & TEST =====
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: test

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Get the first tag from the metadata output
          IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
          echo "Testing image: $IMAGE_TAG"

          # Test the built image
          docker run --rm -d \
            --name test-chatbot \
            -p 5001:5000 \
            -e NODE_ENV=test \
            -e AI_PROVIDER=fallback \
            $IMAGE_TAG

          # Wait for container to be ready
          sleep 15

          # Test endpoints
          curl -f http://localhost:5001/api/v1/health
          curl -f http://localhost:5001/api/v1/docs

          # Cleanup
          docker stop test-chatbot

  # ===== SECURITY SCANNING =====
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:latest
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  # ===== DEPLOYMENT TO STAGING =====
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, test]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Image: ${{ needs.docker-build.outputs.image-tag }}"
          # Add your staging deployment commands here
          # For example: kubectl, docker-compose, or cloud provider CLI

      - name: Run staging tests
        run: |
          echo "üß™ Running staging integration tests..."
          # Add staging-specific tests

  # ===== DEPLOYMENT TO PRODUCTION =====
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "Image: ${{ needs.docker-build.outputs.image-tag }}"
          # Add your production deployment commands here

      - name: Post-deployment verification
        run: |
          echo "‚úÖ Running production health checks..."
          # Add production verification tests

      - name: Notify deployment success
        run: |
          echo "‚úÖ Production deployment successful!"
          # Add notification logic (Slack, Discord, email, etc.)
